z()
default = list(
api_version = "1.0.0",
backend_version = NULL,
stac_version = "1.0.0",
id = "openeo-gdalcubes-R-driver",
title = "gdalcubes",
description = "This is an openEo-compliant R driver interfacing with the package gdalcubes",
links = NULL,
data.path = NULL,
workspaces.path = NULL,
udf_transactions.path = NULL,
udf_cleanup = TRUE,
api.port = 8000,
host = "127.0.0.1",
rudfservice.url = NULL,
outputGDALFormats = NULL,
defaultRasterFormat = "GTiff",
outputOGRFormats = NULL,
defaultVectorFormat = "GeoPackage")
api.port = 8000
host = "127.0.0.1"
l = "http://localhost:"+api.port
l = "http://localhost:"api.port
api.port = "8000"
l = "http://localhost:"+api.port
l = "http://localhost:"api.port
api.port = 8000
l = paste("http://localhost:", api.port)
l = paste("http://localhost:", api.port, host)
l = paste("http://localhost:", api.port)
l = paste("http://localhost:",api.port)
l = paste("http://localhost:",api.port, sep = "")
l = paste("http://localhost:",api.port,host, sep = "")
l = paste("http://localhost:",host, api.port, sep = "")
l = paste("http://localhost:",host, ":", api.port, sep = "")
l = paste("http://",host, ":", api.port, sep = "")
m = http://127.0.0.1:8000
m = "http://127.0.0.1:8000"
devtools::document()
devtools::document()
z = function() {
config = ServerConfig()
createSessionInstance = function(configuration = NULL) {
assign("Session", SessionInstance$new(configuration),envir=.GlobalEnv)
invisible(Session)
}
createSessionInstance(configuration = config)
Session$startup()
}
z()
library(openEo.gdalcubes)
devtools::document()
z = function() {
config = ServerConfig()
createSessionInstance = function(configuration = NULL) {
assign("Session", SessionInstance$new(configuration),envir=.GlobalEnv)
invisible(Session)
}
createSessionInstance(configuration = config)
Session$startup()
}
z()
library(openEo.gdalcubes)
devtools::document()
z = function() {
config = ServerConfig()
createSessionInstance = function(configuration = NULL) {
assign("Session", SessionInstance$new(configuration),envir=.GlobalEnv)
invisible(Session)
}
createSessionInstance(configuration = config)
Session$startup()
}
z()
devtools::document()
z = function() {
config = ServerConfig()
createSessionInstance = function(configuration = NULL) {
assign("Session", SessionInstance$new(configuration),envir=.GlobalEnv)
invisible(Session)
}
createSessionInstance(configuration = config)
Session$startup()
}
z()
library(openEo.gdalcubes)
devtools::document()
z = function() {
config = ServerConfig()
createSessionInstance = function(configuration = NULL) {
assign("Session", SessionInstance$new(configuration),envir=.GlobalEnv)
invisible(Session)
}
createSessionInstance(configuration = config)
Session$startup()
}
z()
library(openEo.gdalcubes)
z = function() {
config = ServerConfig()
createSessionInstance = function(configuration = NULL) {
assign("Session", SessionInstance$new(configuration),envir=.GlobalEnv)
invisible(Session)
}
createSessionInstance(configuration = config)
Session$startup()
}
z()
default = list(
api_version = "1.0.0",
backend_version = NULL,
stac_version = "1.0.0",
id = "openeo-gdalcubes-R-driver",
title = "gdalcubes",
description = "This is an openEo-compliant R driver interfacing with the package gdalcubes",
links = NULL,data.path = NULL,
workspaces.path = NULL,
udf_transactions.path = NULL,
udf_cleanup = TRUE,
api.port = api.port,
host = host,
base_url = paste("http://",host, ":", api.port, sep = ""),
rudfservice.url = NULL,
outputGDALFormats = NULL,
defaultRasterFormat = "GTiff",
outputOGRFormats = NULL,
defaultVectorFormat = "GeoPackage")
library(openEo.gdalcubes)
z = function() {
config = ServerConfig()
createSessionInstance = function(configuration = NULL) {
assign("Session", SessionInstance$new(configuration),envir=.GlobalEnv)
invisible(Session)
}
createSessionInstance(configuration = config)
Session$startup()
}
z()
devtools::document()
z = function() {
config = ServerConfig()
createSessionInstance = function(configuration = NULL) {
assign("Session", SessionInstance$new(configuration),envir=.GlobalEnv)
invisible(Session)
}
createSessionInstance(configuration = config)
Session$startup()
}
z()
z = function() {
config = ServerConfig()
createSessionInstance = function(configuration = NULL) {
assign("Session", SessionInstance$new(configuration),envir=.GlobalEnv)
invisible(Session)
}
createSessionInstance(configuration = config)
Session$startup()
}
z()
z = function() {
config = ServerConfig()
createSessionInstance = function(configuration = NULL) {
assign("Session", SessionInstance$new(configuration),envir=.GlobalEnv)
invisible(Session)
}
createSessionInstance(configuration = config)
Session$startup()
}
z()
library(openEo.gdalcubes)
z = function() {
config = ServerConfig()
createSessionInstance = function(configuration = NULL) {
assign("Session", SessionInstance$new(configuration),envir=.GlobalEnv)
invisible(Session)
}
createSessionInstance(configuration = config)
Session$startup()
}
z()
library(openEo.gdalcubes)
z = function() {
config = ServerConfig()
createSessionInstance = function(configuration = NULL) {
assign("Session", SessionInstance$new(configuration),envir=.GlobalEnv)
invisible(Session)
}
createSessionInstance(configuration = config)
Session$startup()
}
z()
library(openEo.gdalcubes)
z = function() {
config = ServerConfig()
createSessionInstance = function(configuration = NULL) {
assign("Session", SessionInstance$new(configuration),envir=.GlobalEnv)
invisible(Session)
}
createSessionInstance(configuration = config)
Session$startup()
}
z()
library(openEo.gdalcubes)
library(openEo.gdalcubes)
z = function() {
config = ServerConfig()
createSessionInstance = function(configuration = NULL) {
assign("Session", SessionInstance$new(configuration),envir=.GlobalEnv)
invisible(Session)
}
createSessionInstance(configuration = config)
Session$startup()
}
z()
z = function() {
config = ServerConfig()
createSessionInstance = function(configuration = NULL) {
assign("Session", SessionInstance$new(configuration),envir=.GlobalEnv)
invisible(Session)
}
createSessionInstance(configuration = config)
Session$startup()
}
library(openEo.gdalcubes)
z()
??importCollection
???importCollection
?importCollection
library(openEo.gdalcubes)
devtools::document()
config = ServerConfig()
createSessionInstance(configuration = config)
Session$startup()
library(openEo.gdalcubes)
z = function() {
config = ServerConfig()
createSessionInstance(configuration = config)
Session$startup()
}
z()
library(openEo.gdalcubes)
z = function() {
config = ServerConfig()
createSessionInstance(configuration = config)
Session$startup()
}
z()
config = ServerConfig()
createSessionInstance(configuration = config)
Session$startup()
View(Session)
Session$getConfig()
config = ServerConfig()
library(openEo.gdalcubes)
createSessionInstance(configuration = config)
View(Session)
Session$getConfig()
library(openEo.gdalcubes)
config = ServerConfig()
createSessionInstance(configuration = config)
Session$getConfig()
library(openEo.gdalcubes)
config = ServerConfig()
createSessionInstance(configuration = config)
Session$startup()
View(Session)
Session$getConfig()
path = list("Landsat8", "Sentinel")
is.element("Landsat8", list.files(path)
is.element("Landsat8", list.files(path))
is.element("Landsat8", path)
if (! is.element("Landsat8", path)) { "No"}
if (! is.element("Landsat8", path)) { print("No")}
if ( is.element("Landsat8", path)) { print("No")}
if (! is.element("Landsat7", path)) { print("No")}
if (! is.element("L8_Amazon", list.files(C:/Users/ReneS/Documents/R/Tutorial))) { print("No")}
if (! is.element("L8_Amazon", list.files("C:/Users/ReneS/Documents/R/Tutorial"))) { print("No")}
if (! is.element("L8_Amazon", list.files("C:/Users/ReneS/Documents/R/Tutorial"))) { print("No")} else { print("yes")}
if (! is.element("L7_Amazon", list.files("C:/Users/ReneS/Documents/R/Tutorial"))) { print("No")} else { print("yes")}
data.path ="C:/Users/ReneS/Documents/R/BSc/openEo.gdalcubes/data"
da.path = gsub("/$", "", data.path)
da.path = gsub("/", "", data.path)
path = "C:/Users/ReneS/Documents/R/Tutorial"
path = "C:/Users/ReneS/Documents/R/Tutorial/New"
if (! is.element("L8.db",list.files(path))) {
if (! is.element("L8_demo", list.files(path)) {
zipfile = paste(path, "L8_demo.zip", sep = "/")
download.file("https://uni-muenster.sciebo.de/s/e5yUZmYGX0bo4u9/download",
destfile = zipfile, mode="wb")
unzip(zipfile=zipfile, exdir = data.path)
file.remove(zipfile)
}
L8.files = list.files("L8_demo", pattern = ".tif",
recursive = TRUE, full.names = TRUE)
L8.col = create_image_collection(L8.files, format = "L8_SR", out_file = "L8.db")
}
}
download.file("https://uni-muenster.sciebo.de/s/e5yUZmYGX0bo4u9/download",
destfile = "L8_Amazon.zip", mode="wb")
unzip("L8_Amazon.zip", exdir = "L8_Amazon")
library(gdalcubes)
library(magrittr)
library(viridis)
gdalcubes_options(threads = 8)
packageVersion("gdalcubes")
L8.files = list.files("L8_Amazon", pattern = ".tif",
recursive = TRUE, full.names = TRUE)
head(L8.files, 15)
sum(file.size(L8.files)) / 1000^3 # gigabytes
# Create Image Collections
L8.col = create_image_collection(L8.files, format = "L8_SR", out_file = "L8.db")
# L8.col = image_collection("L8.db")
L8.col
collection_formats()
extent(L8.col, srs="EPSG:4326")
path = "C:/Users/ReneS/Documents/R/Tutorial/New"
path = "C:/Users/ReneS/Documents/R/Tutorial/New"
L8.files = list.files("L8_demo", pattern = ".tif",
recursive = TRUE, full.names = TRUE)
L8.col = create_image_collection(L8.files, format = "L8_SR", out_file = "L8.db")
L8.files = list.files(paste(path,"L8_demo"), pattern = ".tif",
recursive = TRUE, full.names = TRUE)
L8.files = list.files(paste(path,"/L8_demo"), pattern = ".tif",
recursive = TRUE, full.names = TRUE)
if (! is.element("L8_demo", list.files(path)) {
zipfile = paste(path, "L8_demo.zip", sep = "/")
download.file("https://uni-muenster.sciebo.de/s/e5yUZmYGX0bo4u9/download",
destfile = zipfile, mode="wb")
unzip(zipfile=zipfile, exdir = data.path)
file.remove(zipfile)
}
L8.files = list.files(path), pattern = ".tif",
recursive = TRUE, full.names = TRUE)
L8.files = list.files(path, pattern = ".tif",
recursive = TRUE, full.names = TRUE)
path = "C:/Users/ReneS/Documents/R/Tutorial/New"
library(gdalcubes)
zipfile = paste(path, "L8_demo.zip", sep = "/")
download.file("https://uni-muenster.sciebo.de/s/e5yUZmYGX0bo4u9/download",
destfile = zipfile, mode="wb")
unzip(zipfile=zipfile, exdir = path)
dir.create(path, recursive = TRUE)
unzip(zipfile=zipfile, exdir = paste(path, "L8_demo"))
unzip(zipfile=zipfile, exdir = paste(path, "/L8_demo"))
unzip(zipfile=zipfile, exdir = paste(path, "/L8_demo"))
unzip(zipfile=zipfile, exdir = ".")
unzip(zipfile=zipfile, exdir = "L8_Demo")
unzip(zipfile=zipfile, exdir = "/L8_Demo")
dir.create(paste(path, "/L8_demo"))
dir.create(paste(path,"/L8_demo"))
dir.create(path)
unzip(zipfile)
is.element("L8_demo", list.files(path))
is.element("L8_demo.zip", list.files(path))
unzip(zipfile, exdir = path)
unzip(zipfile=zipfile, exdir = "L8_DemoX")
unzip(zipfile=zipfile, exdir = "L8_demo")
pathX = paste(path,"/demo", sep = "/")
pathX = paste(path,"demo", sep = "/")
unzip(zipfile, exdir = pathX)
path.demo = paste(path,"L8_demo", sep = "/")
unzip(zipfile=zipfile, exdir = path.demo)
file.remove(zipfile)
file.remove(zipfile)
unlink(zipfile)
unlink(zipfile, recursive = TRUE)
file.remove(zipfile)
unlink(path)
unlink(path, recursive = TRUE)
unlink(path, recursive = TRUE)
unlink(path)
unzip(zipfile=zipfile, exdir = path.demo)
file.remove("L8_demo")
file.remove("L8_demo.zip")
zipfile
unzip(zipfile=zipfile, exdir = path.demo, overwrite = zipfile)
?unzip_file
??unzip_file
install.packages("tidytransit")
??unzip_file
library(tidytransit)
devtools::install_github("r-transit/tidytransit")
remove.packages("tidytransit", lib="~/R/win-library/4.0")
devtools::install_github("r-transit/tidytransit")
devtools::install_github("r-transit/tidytransit")
library(tidytransit)
?unzip_file
unzip_file(zipfile)
tidytransit:::unzip_file(zipfile = zipfile)
zipfile = paste(path, "L8_demo.zip", sep = "/")
path = C:/Users/ReneS/Documents/R/Tutorial/New
path = "C:/Users/ReneS/Documents/R/Tutorial/New"
zipfile = paste(path, "L8_demo.zip", sep = "/")
tidytransit:::unzip_file(zipfile = zipfile)
tidytransit:::unzip_file(zipfile = zipfile, tmpdirpath = path)
path.demo = paste(path,"L8_demo", sep = "/")
unzip(zipfile=zipfile, exdir = path.demo)
file.remove(zipfile)
L8.files = list.files(path.demo, pattern = ".tif",
recursive = TRUE, full.names = TRUE)
L8.col = create_image_collection(L8.files, format = "L8_SR", out_file = "L8.db")
library(gdalcubes)
L8.col = create_image_collection(L8.files, format = "L8_SR", out_file = "L8.db")
L8.col
getwd()
file.remove("L8.db")
setwd(path)
getwd()
L8.col = create_image_collection(L8.files, format = "L8_SR", out_file = "L8.db")
path
#path = private$config$data.path
path = "C:/Users/ReneS/Documents/R/Tutorial/New"
path.demo = paste(path,"L8_demo", sep = "/")
library(gdalcubes)
gdalcubes_options(threads=8)
j = "C:/Users/ReneS/Documents/R/Tutorial/New/L8.db"
i =image_collection(j)
i
nbands(i)
gdalcubes:::print.image_collection(i)
gdalcubes:::print.image_collection(i)$Bands
translate_gtiff(i, target_dir = "C:/Users/ReneS/Documents/R/Tutorial/New")
x =gdalcubes:::print.image_collection(i)$Bands
as.data.frame(i)
x
x =gdalcubes:::print.image_collection(i)
x =gdalcubes:::libgdalcubes_image_collection_info(i)
x
View(x)
x$images$srs
x$bands$name
config = ServerConfig()
createSessionInstance(configuration = config)
library(openEo.gdalcubes)
config = ServerConfig()
createSessionInstance(configuration = config)
Session$data
ex = list()
library(gdalcubes)
gdalcubes_options(threads=8)
j = "C:/Users/ReneS/Documents/R/Tutorial/New/L8.db"
i =image_collection(j)
x =gdalcubes:::libgdalcubes_image_collection_info(i)
View(x)
x[["bands"]][["unit"]]
gdalcubes:::is.image_collection(i)
gdalcubes:::is.image_collection(j)
gdalcubes:::is.image_collection()
extent(i)
i %>% extent()
library(magrittr)
i %>% extent()
i %>% extent()$t0
extent(i)$top
extent(i)$t0
Collection <- R6Class(
"Collection",
public = list(
id = NULL,
title = NULL,
description = NULL,
extent = list(
spatial = NULL,
temporal = NULL
),
srs=NULL,
bands=NULL,
initialize = function(id = NA, title = NA, description = NA, imageCollection = NA) {
#gdalcubes:::is.image_collection()
self$id = id
self$title = title
self$description = description
self$extentextent(imageCollection)
}
)
)
extent = list(
spatial = NULL,
temporal = NULL
)
extent$spatial = b
extent$spatial = "b"
library(gdalcubes)
j = "C:/Users/ReneS/Documents/R/Tutorial/New/L8.db"
i =image_collection(j)
x =gdalcubes:::libgdalcubes_image_collection_info(i)
View(x)
library(openEo.gdalcubes)
library(openEo.gdalcubes)
library(openEo.gdalcubes)
library(openEo.gdalcubes)
z = function() {
config = SessionConfig()
createSessionInstance(configuration = config)
Session$startup()
}
z()
library(openEo.gdalcubes)
library(openEo.gdalcubes)
z = function() {
config = SessionConfig()
createSessionInstance(configuration = config)
Session$startSession()
}
z()
z = function() {
devtools::document()
createSessionInstance()
Session$startSession()
}
z()
